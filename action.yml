name: Replace tokens action
description: A GitHub action to replace tokens in a file, similar to envsubst
author: Jon LaBelle
branding:
  icon: repeat
  color: green

inputs:
  paths:
    description: >-
      Replacement file path(s).
      Specifies a path to one or more locations.
      Specify multiple paths on separate lines using a multiline string `|`.
      Wildcards are accepted.
      The default location is the current directory (`.`).
      Example: `./path/to/my/settings.json`
    required: true

  style:
    description: >-
      The style (or format) of the tokens that will be replaced.
      Accepted values are `mustache/handlebars` (ex: `{{ VARIABLE }}`), `envsubst` (ex: `${VARIABLE}`), and `make` (ex: `$(VARIABLE)`).
      The default token style is `mustache`.
    required: false
    default: 'mustache'

  filter:
    description: >-
      Filter to qualify the `paths` parameter.
      Only supports `*` and `?` wildcards.
      Example: `*.json`
    required: false

  exclude:
    description: >-
      One or more string items or patterns to be matched, and excluded from the results.
      Wildcard characters are accepted.
      Specify multiple exclusions on separate lines using a multiline string `|`.
      Example: `*dev*.json`
    required: false

  recurse:
    description: >-
      Whether or not to recurse directories.
      The default is `false`, or no directory recursion.
    required: false
    default: 'false'

  depth:
    description: >-
      Depth of directory recursion.
      Only valid if the `recurse` option is enabled.
      There default depth is not set.
    required: false
    default: '0'

  follow-symlinks:
    description: >-
      Whether or not to follow symbolic links.
      The default behavior is not to follow symbolic links.
    required: false
    default: 'false'

  encoding:
    description: >-
      Encoding for file read/write operations.
      The default is `utf8`, without the byte order mark (BOM).
      Acceptable values are: `utf8`, `utf8BOM`, `ascii`, `ansi`, `bigendianunicode`, `bigendianutf32`, `oem`, `unicode`, `utf32`
    required: false
    default: 'utf8'

  no-newline:
    description: >-
      Do not insert a newline at the end of the file.
      The default behavior is to insert a newline at the end of the file.
    required: false
    default: 'false'

  fail:
    description: Fail the step if no tokens were replaced.
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - name: Replace tokens
      shell: pwsh
      run: |
        # Split multiline paths
        $paths = '${{ inputs.paths }}' -split '\r?\n|\r' | Where-Object {$_.Trim() -ne ''}
        $exclude = '${{ inputs.exclude }}' -split '\r?\n|\r' | Where-Object {$_.Trim() -ne ''}

        $params = @{
          Path = $paths
          Filter = '${{ inputs.filter }}'
          Recurse = [System.Convert]::ToBoolean('${{ inputs.recurse }}')
          Depth = [System.Convert]::ToInt32('${{ inputs.depth }}')
          FollowSymlinks = [System.Convert]::ToBoolean('${{ inputs.follow-symlinks }}')
          Style = '${{ inputs.style }}'
          Encoding = '${{ inputs.encoding }}'
          NoNewline = [System.Convert]::ToBoolean('${{ inputs.no-newline }}')
          Exclude = $exclude
        }

        $scriptPath = Join-Path -Path '${{ github.action_path }}' -ChildPath 'action.ps1'
        $result = (& $scriptPath @params)
        if ($? -eq $false) {
          echo "::error title=✘ Failed::Review console output for errors"
          exit 1
        }

        $fail = [System.Convert]::ToBoolean('${{ inputs.fail }}')
        if (($fail -eq $true) -and ($result.Count -eq 0)) {
          echo "::error title=✘ No operation performed::Ensure your token file paths are correct, and you have defined the appropriate tokens to replace."
          exit 1
        }

        Write-Output -InputObject 'Tokens were replaced in the following file(s):'
        Write-Output -InputObject $result
